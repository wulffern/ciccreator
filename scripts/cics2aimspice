#!/usr/bin/perl
######################################################################
##        Copyright (c) 2017 Carsten Wulff Software, Norway
## ###################################################################
## Created       : wulff at 2017-3-12
## ###################################################################
##   This program is free software: you can redistribute it and/or modify
##   it under the terms of the GNU General Public License as published by
##   the Free Software Foundation, either version 3 of the License, or
##   (at your option) any later version.
##
##   This program is distributed in the hope that it will be useful,
##   but WITHOUT ANY WARRANTY; without even the implied warranty of
##   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##   GNU General Public License for more details.
##
##   You should have received a copy of the GNU General Public License
##   along with this program.  If not, see <http://www.gnu.org/licenses/>.
######################################################################
use FindBin;
use lib "$FindBin::Bin";
use JSON::Tiny;
use Data::Dumper;
use strict;

my $file = shift;
my $fo  = shift;

my $unitcap = 0.2;

my %deviceMap = (

                );

#----------------------------------------------------------------------------
# Translate names
#----------------------------------------------------------------------------
sub getDeviceName{
  my $name = shift;
  if (exists($deviceMap{$name})) {
    return $deviceMap{$name};
  }
  return $name;

}

#----------------------------------------------------------------------------
# Open and read *.cics file
#----------------------------------------------------------------------------
#- Open output file
open(fo,"> $fo") or die "Could not close $fo";

#- Read json
my $json = new JSON::Tiny;
open(f,"<$file") or die "Could not open $file";
my $buffer;
while (<f>) {
  next if m/\/\//ig;            #- Remove comments
  $buffer .= $_;
}
close(f) or die "Could not close $file";
my $arr = $json->decode($buffer);
my $err  = $json->error;
die $err if $err;


#----------------------------------------------------------------------------
# Write spice file
#----------------------------------------------------------------------------
#- Parse all cells, and write spice
foreach my $cell (@{$arr->{cells}}) {
  next unless $cell->{ckt};
  my $ckt = $cell->{ckt};
  my @nodes = @{$ckt->{nodes}};
  print fo ".SUBCKT ".$ckt->{name}." ".join(' ',@nodes)."\n";
  my @devices = @{$ckt->{devices}};

  #----------------------------------------------------------------------------
  # Write standard capacitors
  #----------------------------------------------------------------------------
  if ($ckt->{class} =~ m/Capacitor/) {
	my $w = $ckt->{properties}->{width};
	my $h = $ckt->{properties}->{width};


	my $a = $w * $h * 0.5;
    print fo "C1 ".$nodes[0]." ".$nodes[1]." ${a}f \n";
	if(scalar(@nodes) > 2){
	  print fo "CB ".$nodes[2]." 0 ".(${a}*0.1)."f \n";
	}  
	foreach my $n(@nodes){
	  print fo "R$n $n 0 1e12\n";
	}


	#----------------------------------------------------------------------------
	# Write CDAC cells
	#----------------------------------------------------------------------------
  } elsif ($ckt->{class} =~ m/CapCell/) {
    foreach my $n (@nodes) {
      next if $n =~ m/CTOP/;
      next if $n =~ m/AVSS/;
      my ($name,$count,$post) = $n =~ m/([^\d]+)(\d+)(\w*)/;

      print fo "${n} $n CTOP ".($unitcap*$count)."f\n";
      print fo "CAVSS_${n} AVSS CTOP ".($unitcap/2)."f\n";
      print fo "R${n} $n 0 1e12\n";
    }

  } else {        #- If it's not a capacitance, then print the devices
	
    foreach my $device (@devices) {
      my $class = $device->{class};
      my @snodes = @{$device->{nodes}};


	  #----------------------------------------------------------------------------
	  # Write Resistors
	  #----------------------------------------------------------------------------
	  if ($class =~ m/Resistor/ig) {
        print fo "R".$device->{name}." ".join(' ',@snodes);
        my $deviceName = $device->{deviceName};
        my %p = %{$device->{properties}};

        if ($deviceName eq "rppo") {

          #- rppo unit resistor
          my $unitr = 1.2191;

          my $r= 0;
          if (exists($p{length}) && exists($p{width})) {
            $r = $p{length}/$p{width}*$unitr;
            print fo " r=".$r."K";
          }

          if (exists($p{length})) {
            print fo " l=".$p{length}."u";
          }

          if (exists($p{width})) {
            print fo " width=".$p{width}."u";
          }
        } elsif ($deviceName eq "mres") {

          print fo " 0.1 ";
        }

		#----------------------------------------------------------------------------
		# Write Mosfets
		#----------------------------------------------------------------------------
      } elsif ($class =~ m/Mosfet/ig) {
        print fo $device->{name}." ".join(' ',@snodes);
        my $deviceName = $device->{deviceName};
        my %properties = %{$device->{properties}};
        print fo " ".getDeviceName($deviceName)." ";
        print fo " w=".$properties{width}."u ";
        print fo " l=".$properties{length}."u ";
        print fo " nf=".$properties{nf}." ";
      }
      print fo " \n";
    }

	#----------------------------------------------------------------------------
	# Write Instances
	#----------------------------------------------------------------------------
    my @instances = @{$ckt->{instances}};
    foreach my $instance (@instances) {

      my @inodes = @{$instance->{nodes}};
      my $name = $instance->{name};
      my $subcktName = $instance->{subcktName};
      if (!($name =~ m/^X/)) {
        $name = "X".$name;
      }

      print fo $name." ".join(' ',@inodes)." $subcktName \n";
    }
  }

  print fo ".ENDS\n\n";
}

close(fo) or die "Could not close $fo";
