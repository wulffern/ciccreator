#!/usr/bin/perl
######################################################################
##        Copyright (c) 2017 Carsten Wulff Software, Norway 
## ###################################################################
## Created       : wulff at 2017-3-12
## ###################################################################
##   This program is free software: you can redistribute it and/or modify
##   it under the terms of the GNU General Public License as published by
##   the Free Software Foundation, either version 3 of the License, or
##   (at your option) any later version.
## 
##   This program is distributed in the hope that it will be useful,
##   but WITHOUT ANY WARRANTY; without even the implied warranty of
##   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##   GNU General Public License for more details.
## 
##   You should have received a copy of the GNU General Public License
##   along with this program.  If not, see <http://www.gnu.org/licenses/>.
######################################################################
use FindBin;
use lib "$FindBin::Bin";
use JSON::Tiny;
use Data::Dumper;
use strict;

my $file = shift;
my $fo  = shift;

open(fo,"> $fo") or die "Could not close $fo";

sub printMosfet{
  my $m = shift;
  my $deviceName = $m->{deviceName};
  my %properties = %{$m->{properties}};
  
  print fo " ".$deviceName." ";

  print fo " w=".$properties{width}."u ";
  print fo " l=".$properties{length}."u ";
  print fo " nf=".$properties{nf}." ";
  print fo " m=".$properties{multiplier}." ";
  
}

sub printResistor{
  my $r = shift;
  my $deviceName = $r->{deviceName};

  print fo " ".$deviceName." ";
}

sub printInstance{
  my $instance = shift;
  my @inodes = @{$instance->{nodes}};
  my $name = $instance->{name};
  my $subcktName = $instance->{subcktName};
  if(!($name =~ m/^X/)){
	$name = "X".$name;
  }
  
  print fo $name." ".join(' ',@inodes)." $subcktName \n";
}

my $json = new JSON::Tiny;

open(f,"<$file") or die "Could not open $file";
my $buffer;
while (<f>) {
  next if m/\/\//ig;
  $buffer .= $_;
}
close(f) or die "Could not close $file";
my $arr = $json->decode($buffer);
my $err  = $json->error;
die $err if $err;

foreach my $cell(@{$arr}){

  my @nodes = @{$cell->{nodes}};
  print fo ".SUBCKT ".$cell->{name}." ".join(' ',@nodes)."\n";
  my @devices = @{$cell->{devices}};
  foreach my $device(@devices){
	my $class = $device->{class};
	my @snodes = @{$device->{nodes}};
	print fo $device->{name}." ".join(' ',@snodes);
	if($class =~ m/Resistor/ig){
	  printResistor($device);
	}elsif($class =~ m/Mosfet/ig){
	  printMosfet($device);
	}
	print fo " \n";
  }
  my @instances = @{$cell->{instances}};
  foreach my $instance(@instances){
	printInstance($instance);
  }

  print fo ".ENDS\n\n";
}

close(fo) or die "Could not close $fo";
